{"version":3,"sources":["assets/images/Spinner-1s-200px.svg","redux/reducers/home.reducer.js","redux/actions/action.types.js","redux/store.js","components/sidebar/index.js","components/layout/index.js","pages/home/index.js","components/user/index.js","redux/selectors/home.selector.js","api/api.js","redux/actions/home.action.js","pages/users/index.js","components/addUserForm/index.js","pages/addUser/index.js","components/post/index.js","pages/posts/index.js","components/addPostForm/index.js","pages/addPost/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","users","tweets","homeReducer","state","action","type","payload","data","reducers","combineReducers","store","createStore","applyMiddleware","thunk","Sidebar","className","src","alt","to","Layout","props","children","user","avatar","title","name","username","BASE_CONNECTION","axios","baseURL","api","getUsers","get","createUser","post","getTweets","createTweet","userId","content","image","parseInt","loadUsers","load","dispatch","then","res","catch","err","console","log","usersServer","useSelector","useDispatch","useEffect","setTimeout","map","item","id","key","Math","random","length","preloader","AddUserForm","history","useHistory","useState","url","changeURL","changeName","changeUsername","buttonState","changeButtonState","onSubmit","e","preventDefault","push","postNewUser","placeholder","required","onChange","target","value","disabled","tweetsServer","tweet","index","AddPostForm","changeContent","changeImage","changeId","isDisable","changeIsDisable","option","style","color","onClick","postNewTweet","routes","path","component","exact","App","route","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7ab34487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.7100a433.svg\";","import { LOAD_USERS_SUCCESS , ADD_NEW_USER_SUCCESS, LOAD_TWEETS_SUCCESS,\r\n    ADD_NEW_TWEET_SUCCESS, } from '../actions/action.types';\r\n\r\nconst initialState = {\r\n  users: [],\r\n  tweets: [],\r\n};\r\n\r\nconst homeReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case LOAD_USERS_SUCCESS: {\r\n            return {\r\n               ...state,\r\n               users : action.payload,\r\n            };\r\n        }\r\n        case ADD_NEW_USER_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                users: [...state.users, action.payload.data.data],\r\n            };\r\n        }\r\n        case LOAD_TWEETS_SUCCESS: {\r\n            return {\r\n                ...state, \r\n                tweets: action.payload.data.data,\r\n            };\r\n        }\r\n        case ADD_NEW_TWEET_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                tweets: [...state.tweets, action.payload]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default homeReducer;","export const LOAD_USERS_SUCCESS = 'LOAD_USERS_SUCCESS';\r\nexport const LOAD_USERS_FAIL = 'LOAD_USERS_FAIL';\r\nexport const ADD_NEW_USER_SUCCESS = 'ADD_NEW_USER_SUCCESS';\r\nexport const ADD_NEW_USER_FAIL = 'ADD_NEW_USER_FAIL';\r\nexport const LOAD_TWEETS_SUCCESS = 'LOAD_TWEETS_SUCCESS';\r\nexport const LOAD_TWEETS_FAIL = 'LOAD_TWEETS_FAIL';\r\nexport const ADD_NEW_TWEET_SUCCESS = 'ADD_NEW_TWEET_SUCCESS';\r\nexport const ADD_NEW_TWEET_FAIL = 'ADD_NEW_TWEET_FAIL';\r\nexport const TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING';\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport homeReducer from '../redux/reducers/home.reducer';\r\n\r\nconst reducers = combineReducers({\r\n    homeReducer,\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Sidebar = () => {\r\n    return(\r\n        <div className='sidebar'>\r\n            <img src=\"https://cdn2.iconfinder.com/data/icons/large-svg-icons-part-3/512/twitter_bird-512.png\" \r\n            alt=\"tweet\" className=\"logo\"/>\r\n            <ul className=\"nav\">\r\n            <li>\r\n              <Link to=\"/reduxthunk/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/reduxthunk/users\">Users</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/reduxthunk/addUser\">Add User</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/reduxthunk/posts\">Posts</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/reduxthunk/addPost\">Add Post</Link>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport Sidebar from '../sidebar/index';\r\nimport './style.css';\r\n\r\n\r\nconst Layout = (props) => {\r\n    return(\r\n        <div className=\"main\">\r\n            <Sidebar></Sidebar>\r\n    <div className=\"wrapper\">{props.children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default () => {\r\n    return(\r\n        <div className=\"homeWrapper\">\r\n            <p className=\"homeText\">Welcome</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nconst user = (props) => {\r\n    return(\r\n        <div className=\"userWrapper\">\r\n            <img className=\"avatar\" src={props.avatar} alt=\"avatar\"/>\r\n            <p className=\"name\" title=\"name\">{props.name}</p>\r\n            <p className=\"username\" title=\"username\">{props.username}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default user;","const users = state => state.homeReducer.users;\r\nconst tweets = state => state.homeReducer.tweets;\r\nconst loader = state => state.homeReducer.isLoading;\r\n\r\nexport { users, tweets, loader };","import * as axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://tweets.globalofficiallottery.com\";\r\n\r\nconst BASE_CONNECTION = axios.create({\r\n    baseURL: BASE_URL,\r\n  });\r\n\r\nconst api = {\r\n    getUsers: () => BASE_CONNECTION.get('/users'),\r\n    createUser: (name, username, avatar) => BASE_CONNECTION.post('/users', {\r\n        name, \r\n        username,\r\n        avatar,\r\n    }),\r\n    getTweets: () => BASE_CONNECTION.get('/tweets'),\r\n    createTweet: (userId, content, image) => BASE_CONNECTION.post('/tweets', {\r\n        userId: parseInt(userId),\r\n        content,\r\n        image,\r\n    }),\r\n};\r\n\r\nexport default api;","import api from '../../api/api';\r\nimport { LOAD_USERS_SUCCESS, LOAD_USERS_FAIL,\r\n   ADD_NEW_USER_SUCCESS, ADD_NEW_USER_FAIL,\r\n   LOAD_TWEETS_SUCCESS, LOAD_TWEETS_FAIL,\r\n   ADD_NEW_TWEET_SUCCESS, ADD_NEW_TWEET_FAIL } from './action.types';\r\n\r\nexport const loadUsers = (load) => (dispatch) => {\r\n    api.getUsers().then((res) => {\r\n      dispatch({\r\n        type: LOAD_USERS_SUCCESS,\r\n        payload: res.data.data,\r\n      });\r\n    }).catch((err) => {\r\n      console.log('error');\r\n      dispatch({\r\n        type: LOAD_USERS_FAIL,\r\n        payload: err,\r\n      });\r\n    });\r\n  };\r\n\r\n  export const postNewUser= ( name, username, url, history) => (dispatch) => {\r\n    api.createUser(name, username, url).then((data) => {\r\n      dispatch({\r\n         type: ADD_NEW_USER_SUCCESS,\r\n         payload: data,\r\n       });\r\n      history.push('/reduxthunk/users');\r\n    }).catch((err) => {\r\n      console.log('error');\r\n      dispatch({\r\n        type: ADD_NEW_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    });\r\n  };\r\n\r\n  export const loadTweets = () => (dispatch) => {\r\n    api.getTweets().then((res) => {\r\n      dispatch({\r\n        type: LOAD_TWEETS_SUCCESS,\r\n        payload: res,\r\n      });\r\n    }).catch((err) => {\r\n      console.log('error');\r\n      dispatch({\r\n        type: LOAD_TWEETS_FAIL,\r\n        payload: err,\r\n      });\r\n    });\r\n  };\r\n\r\n  export const postNewTweet = (userId, content, image, history) => (dispatch) => {\r\n    api.createTweet(userId, content, image).then((data) => {\r\n      dispatch({\r\n        type: ADD_NEW_TWEET_SUCCESS,\r\n        payload: data,\r\n      });\r\n      history.push('/reduxthunk/posts');\r\n    }).catch((err) => {\r\n      console.log('error');\r\n      dispatch({\r\n        type: ADD_NEW_TWEET_FAIL,\r\n        payload: err,\r\n      });\r\n    });\r\n  };\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './style.css';\r\nimport User from '../../components/user/index';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { users } from '../../redux/selectors/home.selector';\r\nimport { loadUsers } from '../../redux/actions/home.action';\r\nimport preloader from '../../assets/images/Spinner-1s-200px.svg';\r\n \r\n\r\nexport default () => {\r\n  const usersServer = useSelector(users);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    setTimeout(() => dispatch(loadUsers()), 500); \r\n  }, [dispatch]);\r\n    \r\n\r\n  const user = usersServer.map(item => {\r\n    return( \r\n      <User\r\n      avatar={item.avatar}\r\n      name={item.name}\r\n      username={item.username}\r\n      id={item.id}\r\n      key={item + Math.random()}\r\n    /> \r\n    )\r\n  })\r\n    return ( \r\n        <div className=\"usersWrapper\">\r\n            {\r\n              usersServer.length ? user : <img src={preloader} alt=\"preloader\"/>\r\n            }\r\n        </div>\r\n    );  \r\n  }","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch} from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './style.css';\r\nimport { postNewUser } from '../../redux/actions/home.action';\r\n\r\n\r\nconst AddUserForm = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [url, changeURL] = useState('');\r\n    const [name, changeName] = useState('');\r\n    const [username, changeUsername] = useState('');\r\n    const [buttonState, changeButtonState] = useState(true);\r\n\r\n    const handleURL = (e) => {\r\n        changeURL(e.target.value);\r\n    }\r\n    const handleName = (e) => {\r\n        changeName(e.target.value);\r\n    }\r\n    const handleUsername = (e) => {\r\n        changeUsername(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(url !== '' && name !== '' && username !== '') {\r\n          changeButtonState(false)\r\n        } else {\r\n            changeButtonState(true)\r\n        }\r\n    }, [url, name, username])\r\n\r\n    const submitUser = (e) => {\r\n        e.preventDefault();\r\n        dispatch(postNewUser( name, username, url, history));\r\n    }\r\n\r\n    return(\r\n        <div className=\"wrapperForm\">\r\n            <form onSubmit={submitUser}>\r\n               <input id=\"avatar\" placeholder=\"Paste a valid URL for avatar\" className=\"input\" required onChange={handleURL}/>\r\n               <input id=\"name\" placeholder=\"Paste your name\" className=\"input\" required onChange={handleName}/>\r\n               <input id=\"username\" placeholder=\"Paste username\" className=\"input\" required onChange={handleUsername}/>\r\n                <button type=\"submit\" className=\"btn\" disabled={buttonState} >\r\n                    Add new user\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUserForm;","import React from 'react';\r\nimport './style.css';\r\nimport AddUserForm from '../../components/addUserForm';\r\n\r\nexport default () => {\r\n    return(\r\n        <div className=\"formWrapper\">\r\n            <AddUserForm/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction post(props) {\r\n    return (\r\n       <div className=\"postWrapper\">\r\n                <div className=\"user\">\r\n                    <img src={props.avatar} className=\"userImage\" alt=\"avatar\"/>\r\n                    <div className=\"content\">\r\n                        <div className=\"userInfo\">\r\n                        <div className=\"username\">{props.name}</div>\r\n                        <div className=\"userlink\">{props.username} </div>\r\n                        </div>\r\n                        <div className=\"message\">{props.content}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ray\">\r\n                    <img src={props.image} className=\"rayImage\" alt=\"another\"/>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <div className=\"item\"><i className=\"far fa-comment\"></i><span>478</span></div>\r\n                    <div className=\"item\"><i className=\"fas fa-random\"></i><span>156</span></div>\r\n                    <div className=\"item\"><i className=\"far fa-heart\"></i><span>756</span></div>\r\n                    <div className=\"item\"><i className=\"fas fa-cloud-upload-alt\"></i></div> \r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default post;","import React, { useEffect } from 'react';\r\nimport './style.css';\r\nimport  Post  from '../../components/post/index';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { tweets, users } from '../../redux/selectors/home.selector';\r\nimport { loadTweets, loadUsers } from '../../redux/actions/home.action';\r\nimport preloader from '../../assets/images/Spinner-1s-200px.svg';\r\n\r\nexport default () => {\r\n    const tweetsServer = useSelector(tweets);\r\n    const usersServer = useSelector(users);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => dispatch(loadTweets()),dispatch(loadUsers()), 500);\r\n      }, [dispatch]);\r\n    console.log(tweetsServer);\r\n\r\n    const tweet = tweetsServer.map((item, index) => {\r\n        return (\r\n            <Post\r\n            name={usersServer[index].name}\r\n            username={usersServer[index].username}\r\n            avatar={usersServer[index].avatar}\r\n            content={item.content}\r\n            userId={item.userId}\r\n            image={item.image}\r\n            />\r\n        )\r\n    })\r\n    return(\r\n        <div className=\"postsWrapper\">\r\n            {\r\n              usersServer.length ? tweet : <img src={preloader} alt=\"preloader\"/>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './style.css';\r\nimport { postNewTweet } from '../../redux/actions/home.action';\r\nimport { users } from '../../redux/selectors/home.selector';\r\nimport { loadUsers } from '../../redux/actions/home.action';\r\n\r\nconst AddPostForm = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [content, changeContent] = useState('');\r\n    const [image, changeImage] = useState('');\r\n    const [userId, changeId] = useState(0);\r\n    const [isDisable, changeIsDisable] = useState(true);\r\n    const usersServer = useSelector(users);\r\n\r\n    useEffect(() => {\r\n        \r\n        if(content !== '' && image !== '') {\r\n            changeIsDisable(false);\r\n        } else {\r\n            changeIsDisable(true);\r\n        }\r\n        setTimeout(() => dispatch(loadUsers()), 500);\r\n    }, [content, image, dispatch]);\r\n    \r\n    const handleContent = (e) => {\r\n        changeContent(e.target.value);\r\n        console.log(e.target.value)\r\n    }\r\n   \r\n    const handleImage = (e) => {\r\n        changeImage(e.target.value);\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    const handleId = (e) => {\r\n        changeId(e.target.value);\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(postNewTweet(userId, content, image, history));\r\n    }\r\n\r\n    const option = usersServer.map((item,index) => {\r\n        return (\r\n            <option value={item.id} style={{color: '#737373'}}>{item.name}</option>\r\n        )\r\n    })\r\n    return(\r\n        <div className=\"wrapperForm\" >\r\n            <form >\r\n               <input  placeholder=\"Content of your post\" className=\"input\" required onChange={handleContent}/>\r\n               <input placeholder=\"URL of the valid image\" className=\"input\" required  onChange={handleImage}/>\r\n                <select className=\"select\" onChange={handleId}>\r\n                  {option}\r\n                </select>\r\n                <button type=\"submit\" className=\"btn\"  disabled={isDisable} onClick={handleSubmit}>\r\n                    Add new post\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPostForm;","import React from 'react';\r\nimport './style.css';\r\nimport AddPostForm from '../../components/addPostForm/index';\r\n\r\nexport default () => {\r\n    return(\r\n        <div className=\"formWrapper\">\r\n            <AddPostForm/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Home from './pages/home';\r\nimport Users from './pages/users';\r\nimport AddUser from './pages/addUser';\r\nimport Posts from './pages/posts/index';\r\nimport AddPost from './pages/addPost/index';\r\n\r\n\r\nexport const routes = [\r\n    {\r\n        path: \"/reduxthunk/users\",\r\n        component: <Users/>\r\n    },\r\n    {\r\n        path: \"/reduxthunk/addUser\",\r\n        component: <AddUser/>\r\n    },\r\n    {\r\n        path: \"/reduxthunk/posts\",\r\n        component: <Posts/>\r\n    },\r\n    {\r\n        path: \"/reduxthunk/addPost\",\r\n        component: <AddPost/>\r\n    },\r\n    {\r\n        path: \"/reduxthunk/\",\r\n        component: <Home/>, \r\n        exact: true\r\n    },\r\n    {\r\n        path: '*',\r\n        component: () => ( <div>page not found 404</div>)\r\n    },\r\n   \r\n]","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n \n} from \"react-router-dom\";\nimport Layout from './components/layout';\nimport { routes } from './routes';\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n      <Switch>\n        {\n          routes.map(route => (\n            <Route exact={route.exact} path={route.path} key={route.toString()}>\n            {route.component}\n          </Route>\n          ))\n        }\n        </Switch>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}